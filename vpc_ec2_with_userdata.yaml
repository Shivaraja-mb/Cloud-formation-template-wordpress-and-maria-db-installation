
Description:  Base VPC Template + 3 Public Instances with wordpress and maria db instaletion
Parameters:
  LatestAmiId:
    Description: AMI for EC2 (default is latest AmaLinux2)
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2'
  DBName:
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Default: 'testdb'
    Description: The WordPress database name
    MaxLength: '64'
    MinLength: '1'
    Type: String
  DBPassword:
    ConstraintDescription: must contain only alphanumeric characters.
    Description: The WordPress database admin account password
    MaxLength: '41'
    MinLength: '6'
    NoEcho: 'true'
    Type: String
    Default: '123456'
  DBRootPassword:
    ConstraintDescription: must contain only alphanumeric characters.
    Description: MySQL root password
    MaxLength: '41'
    MinLength: '6'
    NoEcho: 'true'
    Type: String
    Default: '098765'
  DBUser:
    ConstraintDescription: must begin with a letter and contain only alphanumeric
      characters.
    Description: The WordPress database admin account username
    Default: 'testuser'
    MaxLength: '16'
    MinLength: '1'
    NoEcho: 'true'
    Type: String
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: aws-rt-vpc-1
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: aws-rt-vpc-1-igw
  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  RouteTableWeb: 
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: aws-rt-vpc-1-rt-web-public
  RouteTableWebDefaultIPv4: 
    Type: 'AWS::EC2::Route'
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId:
        Ref: RouteTableWeb
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId:
        Ref: InternetGateway
  RouteTableAssociationWebA:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetWEBA
      RouteTableId:
        Ref: RouteTableWeb
  RouteTableAssociationWebB:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetWEBB
      RouteTableId:
        Ref: RouteTableWeb
  RouteTableAssociationWebC:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref SubnetWEBC
      RouteTableId:
        Ref: RouteTableWeb
  SubnetWEBA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock: 10.0.0.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-rt-subnet-1
  SubnetWEBB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs '' ]
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-rt-subnet-2
  SubnetWEBC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 2, !GetAZs '' ]
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: aws-rt-subnet-3
  Instance1:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: "t2.micro"
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref SubnetWEBA
      SecurityGroupIds: 
        - !Ref InstanceSecurityGroup
      Tags:
        - Key: Name
          Value: EC2UserDataCFN
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          # System Updates
          yum -y update
          yum -y upgrade
          # STEP 2 - Install system software - including Web and DB
          yum install -y mariadb-server httpd wget
          amazon-linux-extras install -y lamp-mariadb10.2-php7.2 php7.2
          # STEP 3 - Web and DB Servers Online - and set to startup
          systemctl enable httpd
          systemctl enable mariadb
          systemctl start httpd
          systemctl start mariadb
          # STEP 4 - Set Mariadb Root Password
          mysqladmin -u root password ${DBRootPassword}
          # STEP 5 - Install Wordpress
          wget http://wordpress.org/latest.tar.gz -P /var/www/html
          cd /var/www/html
          tar -zxvf latest.tar.gz
          cp -rvf wordpress/* .
          rm -R wordpress
          rm latest.tar.gz
          # STEP 6 - Configure Wordpress
          cp ./wp-config-sample.php ./wp-config.php
          sed -i "s/'database_name_here'/'${DBName}'/g" wp-config.php
          sed -i "s/'username_here'/'${DBUser}'/g" wp-config.php
          sed -i "s/'password_here'/'${DBPassword}'/g" wp-config.php
          # Step 6a - permissions   
          usermod -a -G apache ec2-user   
          chown -R ec2-user:apache /var/www
          chmod 2775 /var/www
          find /var/www -type d -exec chmod 2775 {} \;
          find /var/www -type f -exec chmod 0664 {} \;
          # STEP 7 Create Wordpress DB
          echo "CREATE DATABASE ${DBName};" >> /tmp/db.setup
          echo "CREATE USER '${DBUser}'@'localhost' IDENTIFIED BY '${DBPassword}';" >> /tmp/db.setup
          echo "GRANT ALL ON ${DBName}.* TO '${DBUser}'@'localhost';" >> /tmp/db.setup
          echo "FLUSH PRIVILEGES;" >> /tmp/db.setup
          mysql -u root --password=${DBRootPassword} < /tmp/db.setup
          sudo rm /tmp/db.setup

  InstanceSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Enable SSH access via port 22 IPv4
      SecurityGroupIngress:
        - Description: 'Allow SSH IPv4 IN'
          IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp: '0.0.0.0/0'
        - Description: 'Allow HTTP IPv4 IN'
          IpProtocol: tcp
          FromPort: '80'
          ToPort: '80'
          CidrIp: '0.0.0.0/0'
Outputs:
  AWSRTVPC:
    Value: !Ref VPC
    Export: 
      Name: AWSRTVPC
  AWSRTVPCSubnetA:
    Value: !Ref SubnetWEBA
    Export:
      Name: AWSRTVPCSubnetA
  AWSRTVPCSubnetB:
    Value: !Ref SubnetWEBB
    Export:
      Name: AWSRTVPCSubnetB
  AWSRTVPCSubnetC:
    Value: !Ref SubnetWEBC
    Export:
      Name: AWSRTVPCSubnetC
  AWSRTVPCSecurityGroup:
    Value: !Ref InstanceSecurityGroup
    Export:
      Name: AWSRTVPCSecurityGroup      
